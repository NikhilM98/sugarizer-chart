{{- if and (eq .Values.deployment.https true) (ne .Values.cluster.provider "microk8s") }}
# If https is set to true and provider is not microk8s then enable https certificate

{{- if eq .Values.deployment.sspNamespace "none" }}
# If sspNamespace is not present then generate certificate using cert-manager
apiVersion: v1
kind: Secret
data:
  {{- if eq .Values.cluster.provider "gke" }}
  key.json: {{required "gcpServiceAccount not defined" .Values.cluster.gcpServiceAccount}}
  {{- else if eq .Values.cluster.provider "azure" }}
  key.json: {{required "azureClientSecret not defined" .Values.cluster.azureClientSecret | b64enc}}
  {{- else if eq .Values.cluster.provider "aws" }}
  key.json: {{required "awsClientSecret not defined" .Values.cluster.awsClientSecret | b64enc}}
  {{- end }}
metadata:
  name: clouddns-{{required "schoolShortName not defined" .Values.schoolShortName}}
  namespace: sugarizer-{{required "schoolShortName not defined" .Values.schoolShortName}}
type: Opaque

---

apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: sugarizer-letsencrypt-{{required "schoolShortName not defined" .Values.schoolShortName}}
  namespace: sugarizer-{{required "schoolShortName not defined" .Values.schoolShortName}}
spec:
  acme:
    {{- if eq .Values.deployment.production true }}
    server: https://acme-v02.api.letsencrypt.org/directory
    {{- else }}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    {{- end }}
    privateKeySecretRef:
      name: sugarizer-acme-pk-{{required "schoolShortName not defined" .Values.schoolShortName}}
    solvers:
    {{- if eq .Values.cluster.provider "gke" }}
    - dns01:
        clouddns:
          project: {{required "gcpProjectId not defined" .Values.cluster.gcpProjectId}}
          serviceAccountSecretRef:
            name: clouddns-{{required "schoolShortName not defined" .Values.schoolShortName}}
            key: key.json
    {{- else if eq .Values.cluster.provider "azure" }}
    - dns01:
        azuredns:
          clientID: {{required "azureSPAppId not defined" .Values.cluster.azureSPAppId}}
          clientSecretSecretRef:
            name: clouddns-{{required "schoolShortName not defined" .Values.schoolShortName}}
            key: key.json
          subscriptionID: {{required "azureSubscriptionId not defined" .Values.cluster.azureSubscriptionId}}
          tenantID: {{required "azureTenantId not defined" .Values.cluster.azureTenantId}}
          resourceGroupName: {{required "azureDnsZoneResourceGroup not defined" .Values.cluster.azureDnsZoneResourceGroup}}
          hostedZoneName: {{required "azureDnsZone not defined" .Values.cluster.azureDnsZone}}
          environment: AzurePublicCloud
    {{- else if eq .Values.cluster.provider "aws" }}
    - selector:
        dnsZones:
          - {{required "awsDnsZone not defined" .Values.cluster.awsDnsZone}}
      dns01:
        route53:
          region: {{required "awsRegion not defined" .Values.cluster.awsRegion}}
          accessKeyID: {{required "awsAccessKeyId not defined" .Values.cluster.awsAccessKeyId}}
          secretAccessKeySecretRef:
            name: clouddns-{{required "schoolShortName not defined" .Values.schoolShortName}}
            key: key.json
          {{- if .Values.cluster.awsRole }}
          role: {{.Values.cluster.awsRole}}
          {{- end }}
    {{- end }}
---

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: sugarizer-cert-{{required "schoolShortName not defined" .Values.schoolShortName}}
  namespace: sugarizer-{{required "schoolShortName not defined" .Values.schoolShortName}}
spec:
  dnsNames: 
    - {{required "hostName not defined" .Values.hostName}}
  secretName: https-mirror-secret-{{required "schoolShortName not defined" .Values.schoolShortName}}
  issuerRef:
    name: sugarizer-letsencrypt-{{required "schoolShortName not defined" .Values.schoolShortName}}
{{- else }}
# Else use same certificate as Sugarizer School Portal
apiVersion: v1
kind: Secret
metadata:
  name: https-mirror-secret-{{required "schoolShortName not defined" .Values.schoolShortName}}
  namespace: sugarizer-{{required "schoolShortName not defined" .Values.schoolShortName}}
  annotations:
    reflector.v1.k8s.emberstack.com/reflects: '{{required "sspNamespace not defined" .Values.deployment.sspNamespace}}/https-secret-{{required "sspNamespace not defined" .Values.deployment.sspNamespace}}'
type: kubernetes.io/tls
data:
  ca.crt: ""
  tls.crt: ""
  tls.key: ""
{{- end }}

---
{{- end }}

kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: sugarizer-service-db-np-{{required "schoolShortName not defined" .Values.schoolShortName}}
spec:
  policyTypes:
  - Ingress
  - Egress
  podSelector:
    matchLabels:
      school: {{required "schoolShortName not defined" .Values.schoolShortName}}
  ingress:
  - from:
    - podSelector:
        matchLabels:
          school: {{required "schoolShortName not defined" .Values.schoolShortName}}

---

apiVersion: k8s.nginx.org/v1
kind: VirtualServer
metadata:
  name: sugarizer-vs-{{required "schoolShortName not defined" .Values.schoolShortName}}
  namespace: sugarizer-{{required "schoolShortName not defined" .Values.schoolShortName}}
spec:
  {{- if and (eq .Values.deployment.https true) (ne .Values.cluster.provider "microk8s") }}
  tls:
    secret: https-mirror-secret-{{required "schoolShortName not defined" .Values.schoolShortName}}
  {{- end }}
  host: {{required "hostName not defined" .Values.hostName}}
  upstreams:
  - name: web
    service: sugarizer-service-server-{{required "schoolShortName not defined" .Values.schoolShortName}}
    port: 80
  - name: ws
    service: sugarizer-service-ws-{{required "schoolShortName not defined" .Values.schoolShortName}}
    port: 8039
  routes:
  - path: /
    matches:
    - conditions:
      - header: Upgrade
        value: websocket
      action:
        pass: ws
    action:
      pass: web
